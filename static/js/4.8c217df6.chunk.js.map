{"version":3,"sources":["components/common/FormsControls/FormsControls.js","components/common/FormsControls/FormsControls.module.css","components/utils/validators/validators.js","components/Profile/Profile.module.css","components/Profile/ProfileInfo/ProfileInfo.module.css","components/Profile/MyPosts/MyPosts.module.css","components/Profile/MyPosts/Post/Post.module.css","components/Profile/ProfileInfo/ProfileStatuswithhooks.jsx","components/Profile/ProfileInfo/ProfileInfo.jsx","components/Profile/MyPosts/Post/Post.jsx","components/Profile/MyPosts/MyPosts.jsx","components/Profile/MyPosts/MypostsContainer.jsx","components/Profile/Profile.jsx","components/Profile/ProfileContainer.jsx"],"names":["FormControl","meta","touched","error","children","hasError","className","s","formControl","Input","props","input","restProps","Textarea","CreateField","placeholder","name","validate","component","type","text","module","exports","required","value","maxLengthCreator","maxLength","length","ProfileStatusWithHooks","useState","editMode","setEditMode","status","setStatus","useEffect","onChange","e","currentTarget","autoFocus","onBlur","updateStatus","onDoubleClick","ProfileInfo","profile","userId","imagess","src","photos","small","photo","alt","fullName","aboutMe","Preloader","Post","styles","item","id","likeCount","PostReduxFrom","reduxForm","form","onSubmit","handleSubmit","Field","MyPosts","React","memo","post","postData","map","style","postsBlock","addPost","newPostText","posts","MypostsContainer","connect","state","profilePage","dispatch","addPostCreator","Profile","backfone","ProfileContainer","this","match","params","AuthorizedUserId","history","push","getProfile","getUserStatus","Component","compose","auth","isAuth","withRouter"],"mappings":"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","file":"static/js/4.8c217df6.chunk.js","sourcesContent":["import s from './FormsControls.module.css'\r\nimport {Field} from 'redux-form'\r\n\r\nconst FormControl = ({meta: {touched, error}, children}) => {\r\n    const hasError = touched && error\r\n    return (\r\n        <div className={s.formControl + ' ' + (hasError ? s.error : '')}>\r\n            <div>{children}</div>\r\n            {hasError && <span>{error}</span>}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport const Input = (props) => {\r\n    const {input, ...restProps} = props\r\n    return (\r\n        <FormControl {...props}>\r\n            <input {...input} {...restProps} />\r\n        </FormControl>\r\n    )\r\n}\r\n\r\nexport const Textarea = (props) => {\r\n    const {input, ...restProps} = props\r\n    return (\r\n        <FormControl {...props}>\r\n            <textarea {...restProps} {...input} />\r\n        </FormControl>\r\n    )\r\n}\r\nexport const CreateField = (placeholder, name, validate, component, type, text) => {\r\n    return (\r\n        <>\r\n            <Field\r\n                placeholder={placeholder}\r\n                name={name}\r\n                validate={validate}\r\n                component={component}\r\n                type={type}\r\n            />\r\n            {text}\r\n        </>\r\n    )\r\n}\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"formControl\":\"FormsControls_formControl__2hHF4\",\"error\":\"FormsControls_error__bgKgi\"};","export const required = (value) => {\r\n    if (value) {\r\n        return undefined\r\n    }\r\n    return 'Field is required'\r\n}\r\n\r\nexport const maxLengthCreator = (maxLength) => {\r\n    return (value) => {\r\n        if (value.length > maxLength) {\r\n            return `Максимальная длинна ${maxLength}`\r\n        }\r\n        return undefined\r\n    }\r\n}\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"backfone\":\"Profile_backfone__Hl3M3\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"descriptionBlock\":\"ProfileInfo_descriptionBlock__Esq_z\",\"imagess\":\"ProfileInfo_imagess__1Vs8G\",\"fullName\":\"ProfileInfo_fullName__11W3a\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"postsBlock\":\"MyPosts_postsBlock__FyYMf\",\"posts\":\"MyPosts_posts__2zCiB\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"item\":\"Post_item__1CLqm\"};","import {useEffect, useState} from 'react'\r\n\r\nconst ProfileStatusWithHooks = (props) => {\r\n    let [editMode, setEditMode] = useState(false)\r\n    let [status, setStatus] = useState(props.status)\r\n\r\n    useEffect(() => {\r\n        setStatus(props.status)\r\n    }, [props.status])\r\n\r\n    const activateEditMode = () => {\r\n        setEditMode(true)\r\n    }\r\n    const deactivateEditMode = () => {\r\n        setEditMode(false)\r\n        props.updateStatus(status)\r\n    }\r\n    const statusChange = (e) => {\r\n        setStatus(e.currentTarget.value)\r\n    }\r\n    return (\r\n        <div>\r\n            {!editMode ? (\r\n                <div>\r\n                    <span onDoubleClick={activateEditMode}>\r\n                        {props.status ? props.status : 'Статус отсутсвует'}\r\n                    </span>\r\n                </div>\r\n            ) : (\r\n                <div>\r\n                    <input\r\n                        value={status}\r\n                        onChange={statusChange}\r\n                        autoFocus={true}\r\n                        onBlur={deactivateEditMode}\r\n                    />\r\n                </div>\r\n            )}\r\n        </div>\r\n    )\r\n}\r\nexport default ProfileStatusWithHooks\r\n","import s from './ProfileInfo.module.css'\r\nimport Preloader from '../../common/Preloader/Preloader'\r\nimport photo from '../MyPosts/Post/photo.svg'\r\nimport ProfileStatusWithHooks from './ProfileStatuswithhooks'\r\n\r\nconst ProfileInfo = ({profile, userId, status, updateStatus}) => {\r\n    if (!profile) {\r\n        return <Preloader />\r\n    }\r\n    return (\r\n        <div>\r\n            <div>\r\n                <img\r\n                    className={s.imagess}\r\n                    src={profile.photos.small ? profile.photos.small : photo}\r\n                    alt={userId}\r\n                />\r\n                <div className={s.fullName}>{profile.fullName}</div>\r\n                <div>{profile.aboutMe}</div>\r\n                <ProfileStatusWithHooks status={status} updateStatus={updateStatus} />\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ProfileInfo\r\n","import styles from './Post.module.css'\r\nimport photo from './photo.svg'\r\n\r\nconst Post = (props) => {\r\n    return (\r\n        <div className={styles.item}>\r\n            <img src={props.photos.small ? props.photos.small : photo} alt={props.id} />\r\n            <div>{props.text}</div>\r\n            <div>Likes {props.likeCount}</div>\r\n            <div>Id {props.id}</div>\r\n        </div>\r\n    )\r\n}\r\nexport default Post\r\n","import style from './MyPosts.module.css'\r\nimport Post from './Post/Post'\r\nimport Preloader from '../../common/Preloader/Preloader'\r\nimport {Field, reduxForm} from 'redux-form'\r\nimport {required, maxLengthCreator} from '../../utils/validators/validators'\r\nimport {Textarea} from '../../common/FormsControls/FormsControls'\r\nimport React from 'react'\r\n\r\nconst maxLength = maxLengthCreator(100)\r\n\r\nconst addNewPostForm = (props) => {\r\n    return (\r\n        <form onSubmit={props.handleSubmit}>\r\n            <Field\r\n                name={'newPostText'}\r\n                component={Textarea}\r\n                placeholder='Напишите что нибудь'\r\n                validate={[required, maxLength]}\r\n            />\r\n            <button>Опубликовать пост</button>\r\n        </form>\r\n    )\r\n}\r\n\r\nconst PostReduxFrom = reduxForm({form: 'ProfileAddNewPostForm'})(addNewPostForm)\r\n\r\nconst MyPosts = React.memo((props) => {\r\n    if (!props.profile) {\r\n        return <Preloader />\r\n    }\r\n    let post = props.postData.map((item) => {\r\n        return (\r\n            <Post\r\n                text={item.text}\r\n                likeCount={item.likeCount}\r\n                id={item.id}\r\n                key={item.id}\r\n                photos={props.profile.photos}\r\n            />\r\n        )\r\n    })\r\n\r\n    let onAddPost = (value) => {\r\n        props.addPost(value.newPostText)\r\n    }\r\n\r\n    return (\r\n        <div className={style.postsBlock}>\r\n            <h3>My posts</h3>\r\n            <PostReduxFrom onSubmit={onAddPost} />\r\n            <div className={style.posts}>{post}</div>\r\n        </div>\r\n    )\r\n})\r\n\r\nexport default MyPosts\r\n","import {addPostCreator} from '../../../redux/profileReducer'\r\nimport MyPosts from './MyPosts'\r\nimport {connect} from 'react-redux'\r\n\r\nconst mapStateToProps = (state) => {\r\n    return {\r\n        postData: state.profilePage.postData,\r\n        newPostText: state.profilePage.newPostText,\r\n        profile: state.profilePage.profile,\r\n    }\r\n}\r\nconst mapDispatchToProps = (dispatch) => {\r\n    return {\r\n        addPost: (newPostText) => {\r\n            dispatch(addPostCreator(newPostText))\r\n        },\r\n    }\r\n}\r\nconst MypostsContainer = connect(mapStateToProps, mapDispatchToProps)(MyPosts)\r\nexport default MypostsContainer\r\n","import style from './Profile.module.css'\r\nimport ProfileInfo from './ProfileInfo/ProfileInfo'\r\nimport MypostsContainer from './MyPosts/MypostsContainer'\r\n\r\nconst Profile = (props) => {\r\n    return (\r\n        <div className={style.backfone}>\r\n            <ProfileInfo\r\n                profile={props.profile}\r\n                status={props.status}\r\n                updateStatus={props.updateStatus}\r\n            />\r\n            <MypostsContainer />\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Profile\r\n","import React from 'react'\r\nimport Profile from './Profile'\r\nimport {connect} from 'react-redux'\r\nimport {withRouter} from 'react-router-dom'\r\nimport {getProfile, getUserStatus, updateStatus} from '../../redux/profileReducer'\r\nimport {compose} from 'redux'\r\n\r\nclass ProfileContainer extends React.Component {\r\n    componentDidMount() {\r\n        let userId = this.props.match.params.userId\r\n        if (!userId /*&& this.props.isAuth*/) {\r\n            userId = this.props.AuthorizedUserId\r\n            if (!userId) {\r\n                this.props.history.push('/login')\r\n            }\r\n        }\r\n        this.props.getProfile(userId)\r\n        this.props.getUserStatus(userId)\r\n    }\r\n    render() {\r\n        return (\r\n            <Profile\r\n                {...this.props}\r\n                profile={this.props.profile}\r\n                status={this.props.status}\r\n                updateStatus={this.props.updateStatus}\r\n            />\r\n        )\r\n    }\r\n}\r\nlet mapStateToProps = (state) => ({\r\n    profile: state.profilePage.profile,\r\n    status: state.profilePage.status,\r\n    AuthorizedUserId: state.auth.userId,\r\n    isAuth: state.auth.isAuth,\r\n})\r\nexport default compose(\r\n    connect(mapStateToProps, {getProfile, getUserStatus, updateStatus}),\r\n    withRouter\r\n)(ProfileContainer)\r\n"],"sourceRoot":""}